using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1 {
    class Program {
        static void Main(string[] args) {
            Console.Out.WriteLine("test");
            Console.Out.WriteLine(Add(1, 3));
            Console.ReadLine();
            Console.ReadLine();
        }

        static int Add(int x, int y) {
            return x + y;
        }
    }

}
//  vim - 
//  i - insert mode
//  x - delete character
//  hjkl - arrow keys
//  esc - return to normal (command) mode

// in comparison to the nested functions in sicp, we have the class and the program. the program would be the same idea as the 
// function in Lisp. 
// the static means it's able to do its work with its arguments only
// void means that it returns nothing
// program is the class
// main is the name of the function
// string is the text
// the arg is the  parameter of Main and later on, int x and int y are the parameters of Add. 
// Console.Out.WriteLine is going to be a similar idea to the repel in Lisp and DrRacket. Long story short, it acts as kind of like a rpint function in Scheme. we need each of those for each line
// Console.Out.WriteLine (Add (1, 3)) will give us another line in that 
// "print form"
// Console.ReadLine will give us a blank line. for this, we need to hit enter to close the window, and here we have 2 ReadLines, wwhich makes us hit enter twice to close the window. 
// 
// We actually have a function in the Class Program. We have the args of Add and we have the function will return in its expression.
// we need to keep the specific signature of "static void Main (string[] args) to be a valid entry point
//to use a function that is "nested" in another class, we need to both make the function such as : public (public static int Add (int x, int y) and we need to use the full name of the function, so for this case its MathThings. 
//
//

